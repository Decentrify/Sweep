
package se.sics.ms.helper;

import se.sics.ms.data.InternalStatePacket;
import se.sics.ms.main.SimulationSerializer;

import java.nio.ByteBuffer;

/**
 * Serializer for the Internal State Packet that is generated by the
 * application to be sent to the global aggregator.
 *
 * Created by babbar on 2015-09-19.
 */
public class ISPSimSerializer implements SimulationSerializer{

    private int id;

    public ISPSimSerializer(int id){
        this.id = id;
    }


    @Override
    public int getIdentifier() {
        return this.id;
    }

    @Override
    public int getByteSize(Object baseObject) {

        InternalStatePacket internalStatePacket = (InternalStatePacket) baseObject;

        int result = 0;

        result += 3 * 4; // four ints val;
        result += 1;     // Byte for indicating the presence of the leader information.

        Integer leaderId = internalStatePacket.getLeaderIdentifier();
        if(leaderId == null){
            result += 4;
        }

        result += 8; // For the number of entries.

        return result;
    }

    @Override
    public void toBinary(Object o, ByteBuffer buffer) {


        InternalStatePacket isp = (InternalStatePacket)o;
        buffer.putInt(isp.getSelfIdentifier());
        buffer.putInt(isp.getPartitionId());
        buffer.putInt(isp.getPartitionDepth());

        Integer leaderId = isp.getLeaderIdentifier();

        if(leaderId == null){
            buffer.put((byte)0);
        }
        else {
            buffer.put((byte)1);
            buffer.putInt(isp.getLeaderIdentifier());
        }

        buffer.putLong(isp.getNumEntries());
    }

    @Override
    public Object fromBinary(ByteBuffer buffer) {


        Integer selfIdentifier = buffer.getInt();
        int partitionId = buffer.getInt();
        int partitionDepth = buffer.getInt();


        int isLeader = buffer.get();
        Integer leaderId = null;
        if(isLeader != 0){
            leaderId = buffer.getInt();
        }

        long numEntries = buffer.getLong();

        return new InternalStatePacket(selfIdentifier, partitionId, partitionDepth, leaderId, numEntries);
    }
}
